#! /usr/bin/python3
# -*- coding: utf-8 -*-
__author__    = "Pierre Etheve"
__email__  = "pierre.etheve.lfdv@gmail.com"

from subprocess import Popen, PIPE, STDOUT
import argparse
import os

parser = argparse.ArgumentParser(description="Custom dataset builder for Pix2Pix")
parser.add_argument('-project', '-p', type=str, required=True, help='name of the project')
parser.add_argument('-step', '-s', type=int, required=True, help='step number')
parser.add_argument('-channels', '-c', type=int, required=False, default=3, help='number of channels (1=greyscale, 3=RGB, 4=RGBA)')
parser.add_argument('-iter', '-i', type=str, required=False, default="200+100", help="number of iteration [no_decay+decay] ex:'-i 200+100' (specific to step 1 and 4)")
parser.add_argument('-n_render', '-n', type=int, required=False, default=5000, help="number of images to be rendered (specific to step 2 and 5)")
parser.add_argument('-subset', '-sub', '-variant', '-var', type=str, required=False, default="", help='if you want to specify a special version of the dataset')
parser.add_argument('-continue_train', type=str, required=False, default="", help='True/False if you want to autoanswer training question')
parser.add_argument('-learning_rate', '-lr', type=int, required=False, default=100, help='learning rate (in percent of normal LR)')

opt = parser.parse_args()


def generateWorkingDirectory() :
	path = "datasets/%s/"%opt.project
	phase = ""

	if opt.step == 1 or opt.step == 4 :
		phase = "train"
	else :
		phase = "test"

	print(phase)

	if opt.step == 1 or opt.step == 2 :
		path += "struct"
	else :
		path += "unstigma"

	if opt.subset != "" :
		path += "_"+opt.subset

	elif os.path.exists(path+"_"+phase) :
		path += "_"+phase

	return path + "/"




i0=0
i1=0
if "+" in opt.iter :
	i0 = int(opt.iter.split("+")[0])
	i1 = int(opt.iter.split("+")[1])
else :
	i0 = int(opt.iter)


path = generateWorkingDirectory()
print("Dataset location : "+path)

lr = 0.0002*opt.learning_rate/100

train_option = ""

if opt.step == 1 or opt.step == 4 :
	if len(opt.continue_train) > 0 :
		if "true" in opt.continue_train.lower() :
			train_option = "--continue_train"

	elif "y" in input("Do you want to resume existing training ? [y/N] ").lower() :
		train_option = "--continue_train"

step1 = "python train.py --dataroot %s --name %s_struct_pix2pix_mix --model pix2pix --direction AtoB --load_size 384 --crop_size 384 --netG unet_128 --niter %d --niter_decay %d --display_freq 50 %s --dataset_mode anim --lr %f"%(path, opt.project, i0, i1, train_option, lr)
step2 = "python test.py --dataroot %s --name %s_struct_pix2pix_mix --model pix2pix --direction AtoB --load_size 384 --crop_size 384 --netG unet_128 --num_test %d --dataset_mode anim"%(path, opt.project, opt.n_render)
step3 = "./generate_unstigma.py -source datasets/%s/ -results results/%s_struct_pix2pix_mix/"%(opt.project, opt.project)
step4 = "python train.py --dataroot %s --name %s_unstigma_pix2pix_mix --model pix2pix --direction AtoB --load_size 768 --crop_size 384 --netG unet_128 --niter %d --niter_decay %d --display_freq 50 %s --dataset_mode anim --lr %f"%(path, opt.project, i0, i1, train_option, lr)
step5 = "python test.py --dataroot %s --name %s_unstigma_pix2pix_mix --model pix2pix --direction AtoB --load_size 768 --crop_size 768 --netG unet_128 --dataset_mode anim --num_test %d"%(path, opt.project, opt.n_render)

if opt.subset != "" :
	step3 += " -variant %s"%opt.subset

if opt.channels != 3 :
	step1 += " --input_nc %d --output_nc %d"%(opt.channels, opt.channels)
	step2 += " --input_nc %d --output_nc %d"%(opt.channels, opt.channels)
	step4 += " --input_nc %d --output_nc %d"%(opt.channels, opt.channels)
	step5 += " --input_nc %d --output_nc %d"%(opt.channels, opt.channels)

com_index = {"step1":step1, "step2":step2, "step3":step3, "step4":step4, "step5":step5}

command = com_index["step%d"%opt.step]

print(command)

p = Popen(command, stdout = PIPE, 
        stderr = STDOUT, shell = True)


try :
	while True:
	  line = p.stdout.readline()

	  if not line: 
	  	break

	  # line = str(line)
	  line = line.decode("utf-8")
	  line = line.replace("\n", "")
	  print(line)

except :
	p.terminate()
	print("\n\nPix2Pix stopped.")